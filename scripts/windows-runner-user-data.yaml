# windows-runner-user-data.yaml
#
# User Script for launching a Windows EC2 instance that:
#  - logs to C:\UserData.log
#  - installs git, Make, AWS tools, latest powershell, Nuget, yq and Carbon
#  - installs WSL2 and its dependencies
#    * reboots the instance to apply the installation
#  - periodically updates WSL2
#  - registers as a self-hosted GitHub Actions runner on instance startup
version: 1.0
tasks:
  - task: executeScript
    inputs:
      - frequency: once
        type: powershell
        runAs: admin
        content: |-
          Start-Transcript -Path "C:\UserData.log" -Append
          $progressPreference = 'silentlyContinue'
          $RUNNER_DIR="C:\actions-runner"

          # "<name>" values set in lib/asg-runner-stack.ts
          $LABEL_ARCH="amd64"
          $LABEL_STAGE="<STAGE>"
          $REPO="<REPO>"
          $REGION="<REGION>"

          Write-Information "Installing latest powershell7 version..."
          Invoke-Expression "& { $(Invoke-RestMethod 'https://aka.ms/install-powershell.ps1') } -useMSI -EnablePSRemoting -Quiet"

          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Program Files\PowerShell\7\pwsh.exe" -PropertyType String -Force

          New-Item -Path $Profile -ItemType File -Force 
          'Set-PSReadLineOption -EditMode Emacs' | Out-File -Append $Profile

          New-Item -Path $Home\setup -ItemType Directory
          New-Item -Path $Home\setup\bin -ItemType Directory
          Set-Location $Home\setup

          Write-Information "Install dependencies git, make, go, AWS tools, NuGet and update path..."

          # Install latest NuGet so that Carbon installation works later
          Install-PackageProvider -Name NuGet -Force

          $pws7script = @'
          Start-Transcript -Path "$Home\setup\setup7.log" -Append
          Import-Module -Name Appx -UseWindowsPowerShell

          # Install git and Make
          Invoke-WebRequest -Uri 'https://github.com/git-for-windows/git/releases/download/v2.47.0.windows.2/Git-2.47.0.2-64-bit.exe' -OutFile 'git-2.47.0.2.exe'
          .\git-2.47.0.2.exe /SILENT
          # use curl to follow redirects
          & "C:\Windows\System32\curl.exe" -L https://sourceforge.net/projects/gnuwin32/files/make/3.81/make-3.81.exe/download -o make.exe
          .\make.exe /SILENT

          # Install AWS tools
          Install-Module -Name AWS.Tools.Common -Force
          Install-Module -Name AWS.Tools.SecretsManager -Force
          Install-Module -Name AWS.Tools.EC2 -Force
          Install-Module -Name AWS.Tools.AutoScaling -Force

          # Install AWS CLI
          Invoke-WebRequest -Uri https://awscli.amazonaws.com/AWSCLIV2.msi -OutFile AWSCLIV2.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I AWSCLIV2.msi /quiet'
          Remove-Item AWSCLIV2.msi
              
          # Install Go
          Invoke-WebRequest -Uri 'https://go.dev/dl/go1.23.3.windows-amd64.msi' -OutFile 'go1.23.3.windows-amd64.msi'
          Start-Process msiexec.exe -Wait -ArgumentList '/I C:\Users\Administrator\setup\go1.23.3.windows-amd64.msi /quiet'

          # Install yq
          Invoke-WebRequest -Uri 'https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_windows_amd64.exe' -OutFile '.\bin\yq.exe'

          # Configure path; include path to pre release WSL
          $newPath = ("C:\Program Files\Git\bin\;" + "C:\Program Files\Git\usr\bin\;" + "C:\Program Files\WSL\;" + "$env:Path" + ";C:\Program Files\Git\bin\;" + "C:\Program Files (x86)\GnuWin32\bin\;" + "C:\Program Files\Go\bin\;" + "$Home\setup\bin\;" + "C:\Program Files\Amazon\AWSCLIV2\;")
          $env:Path = $newPath
          # Persist the path to the registry for new shells
          Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
          '@

          # Write PowerShell 7 script to file
          $pws7script | Out-File $Home\setup\setup7.ps1

          # Execute script with PowerShell 7
          Write-Information "Running setup7.ps1..."
          $ConsoleCommand = "$Home\setup\setup7.ps1"
          Start-Process "C:\Program Files\PowerShell\7\pwsh" -Wait -NoNewWindow -PassThru -ArgumentList "-Command  &{ $ConsoleCommand }"

          Write-Information "Downloading and configuring GitHub Actions Runner..."
          mkdir $RUNNER_DIR; cd $RUNNER_DIR
          Invoke-WebRequest -Uri https://github.com/actions/runner/releases/download/v2.316.0/actions-runner-win-x64-2.316.0.zip -OutFile actions-runner-win-x64-2.316.0.zip
          if((Get-FileHash -Path actions-runner-win-x64-2.316.0.zip -Algorithm SHA256).Hash.ToUpper() -ne '9b2d0443d11ce5c2c4391d708576dc37b1ecf62edcceec7c0c9c8e6b4472b5a1'.ToUpper()){ throw 'Computed checksum did not match' }
          Add-Type -AssemblyName System.IO.Compression.FileSystem ;  [System.IO.Compression.ZipFile]::ExtractToDirectory("$PWD/actions-runner-win-x64-2.316.0.zip", "$PWD")

          $GH_KEY=(Get-SECSecretValue -SecretId $REPO-runner-reg-key -Region $REGION).SecretString
          $LABEL_OS_VER=$([System.Environment]::OSVersion.Version.Major)
          $LABEL_BUILD_VER=$([System.Environment]::OSVersion.Version.Build)

          $RUNNER_REG_TOKEN=((Invoke-WebRequest -UseBasicParsing -Method POST -Headers @{"Accept" = "application/vnd.github+json"; "Authorization" =  "Bearer $GH_KEY";  "X-GitHub-Api-Version" = "2022-11-28"} -Uri https://api.github.com/repos/runfinch/$REPO/actions/runners/registration-token).Content | ConvertFrom-Json).token

          Write-Information "Starting GitHub Actions Runner..."
          cd $RUNNER_DIR; ./config.cmd --url https://github.com/runfinch/$REPO --unattended --runasservice --token  $RUNNER_REG_TOKEN --work _work --labels $LABEL_ARCH,$LABEL_OS_VER,$LABEL_BUILD_VER,$LABEL_STAGE

          # To install WSL2, the instance must be rebooted: https://learn.microsoft.com/en-us/windows/wsl/install
          # To accomplish this while not replacing the instance in the autoscaling group,
          #
          # 1. Put the instance in "StandBy" mode
          # 2. Register a powershell script to be run at instance reboot on login
          # 3. Install WSL2 and restart the instance

          Write-Information "Entering StandBy..."
          $InstanceId=(Get-EC2InstanceMetadata -Category InstanceId)
          $ASGName=(Get-ASAutoScalingInstance -InstanceId $InstanceId).AutoScalingGroupName
          Enter-ASStandby -AutoScalingGroupName $ASGName -InstanceId $InstanceId -ShouldDecrementDesiredCapacity $true

          # Script runs on login after reboot to start GitHub Actions service, put the instance InService in the ASG,
          # and update wsl version to pre-release verion such that ssh / session 0 connections can call wsl
          # Allow inbound connections on vEthernet interface for traffic from wsl to host
          $ServiceName=(Get-Service actions.runner.*).name
          $startupscript = @'
          Start-Transcript -Path "C:\StartupScript.log" -Append
          Invoke-WebRequest -Uri 'https://github.com/microsoft/WSL/releases/download/2.2.4/wsl.2.2.4.0.x64.msi' -OutFile 'C:\Users\Administrator\setup\wsl.2.2.4.0.x64.msi'
          Start-Process msiexec.exe -Wait -ArgumentList '/i C:\Users\Administrator\setup\wsl.2.2.4.0.x64.msi /L*V C:\WSLInstallation.log /quiet'
          # Update the WSL kernel
          Invoke-WebRequest -Uri 'https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi' -OutFile 'C:\Users\Administrator\setup\wsl_update_x64.msi'
          Start-Process msiexec.exe -Wait -ArgumentList '/i C:\Users\Administrator\setup\wsl_update_x64.msi /L*V C:\WSLInstallation.log /quiet'
          Exit-ASStandby -AutoScalingGroupName $ASGName -InstanceId $InstanceId
          Start-Process -NoNewWindow -FilePath wsl -ArgumentList '--install Ubuntu'
          sleep 30 # sleep to allow Ubuntu VM to start
          New-NetFirewallRule -DisplayName "WSL" -Direction Inbound -InterfaceAlias "vEthernet (WSL)" -Action Allow
          '@

          # Write startup powershell script to file. 
          # $ExecutionContext.InvokeCommand.ExpandString will evaluate variables first, so the ASG and instance ID are specified
          Set-Content 'C:\startup.ps1' ($ExecutionContext.InvokeCommand.ExpandString($startupscript))

          # Register a scheduled job to run the script to regist the instance as a runner on boot.
          $trigger = New-JobTrigger -AtStartup -RandomDelay 00:00:30
          Register-ScheduledJob -Trigger $trigger -FilePath C:\startup.ps1 -Name startup-job-inservice

          Write-Information "Changing GHA service ownership to Administrator..."
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-Module -Name 'Carbon' -AllowClobber -Force
          # Configure the GitHub Actions runner service to log on as Administrator; grant the Administrator
          # user "Log on as a Service" privileges via Carbon module:
          # https://get-carbon.org/Grant-Privilege.html
          Stop-Service "actions.runner.*"
          Grant-CPrivilege -Identity "Administrator" "SeServiceLogonRight"

          net user Administrator "$GH_KEY"

          Write-Information "starting GHA service..."
          Set-Service -Name $ServiceName -StartupType Automatic
          Start-Service "actions.runner.*"

          Invoke-Expression "cmd.exe /c sc config $ServiceName obj= '$(hostname)\Administrator' password= '$GH_KEY' type= own"

          wsl --install

          Write-Information "Restarting instance..."
          Restart-Computer
